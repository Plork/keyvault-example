{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "keyVaultName": {
            "type": "string"
        },
        "keyVaultId": {
            "type": "string",
            "defaultValue": ""
        },
        "keyVaultSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "SKU for the vault"
            }
        },
        "keyVaultAccessPolicies": {
            "type": "array",
            "metadata": {
                "description": "Access Policies defining the scope and level of access for different principals"
            }
        },
        "keyVaultNetworkAcls": {
            "type": "object",
            "metadata": {
                "description": "Network Access Control rules for the Key Vault"
            }
        },
        "keyVaultPurgeSoftDelete": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable the soft delete for the Key Vault"
            }
        },
        "diagnosticLogAnalyticsWorkspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The resource ID of the OMS workspace used for diagnostic log integration."
            }
        },
        "diagnosticEventHubNamespaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The resource ID of the Event Hub Namespace used for diagnostic log integration."
            }
        },
        "diagnosticEventHubAuthorisationRule": {
            "type": "string",
            "defaultValue": "RootManageSharedAccessKey",
            "metadata": {
                "description": "Name of the Event Hub Namespace Authorisation Rule used for diagnostic log integration."
            }
        }
    },
    "variables": {
        "eventHubAuthorizationRuleId": "[concat(parameters('diagnosticEventHubNamespaceId'), '/authorizationRules/', parameters('diagnosticEventHubAuthorisationRule'))]"
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "2016-10-01",
            "location": "[resourcegroup().location]",
            "properties": {
                "createMode": "[if(not(empty(parameters('keyVaultId'))), 'recover', 'default')]",
                "enableSoftDelete": "[parameters('keyVaultPurgeSoftDelete')]",
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[if(not(empty(parameters('keyVaultId'))), json('null'),  json('[]'))]",
                "sku": {
                    "name": "[parameters('keyVaultSku')]",
                    "family": "A"
                },
                "networkAcls": "[parameters('keyVaultNetworkAcls')]"
            },
            "resources": [
                {
                    "type": "providers/diagnosticSettings",
                    "name": "Microsoft.Insights/logAnalytics",
                    "condition": "[not(empty(parameters('diagnosticLogAnalyticsWorkspaceId')))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "location": "[resourcegroup().location]",
                    "properties": {
                        "workspaceId": "[parameters('diagnosticLogAnalyticsWorkspaceId')]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": true,
                                    "days": 0
                                }
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": false,
                                    "days": 0
                                }
                            }
                        ]
                    }
                },
                {
                    "type": "providers/diagnosticSettings",
                    "name": "Microsoft.Insights/eventHub",
                    "condition": "[not(empty(parameters('diagnosticEventHubNamespaceId')))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "location": "[resourcegroup().location]",
                    "properties": {
                        "eventHubAuthorizationRuleId": "[variables('eventHubAuthorizationRuleId')]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": true,
                                    "days": 0
                                }
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": false,
                                    "days": 0
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(parameters('keyVaultName'), '/add')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ],
            "apiVersion": "2019-09-01",
            "properties": {
                "accessPolicies": "[parameters('keyVaultAccessPolicies')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/locks",
            "apiVersion": "2016-09-01",
            "name": "[concat(parameters('keyVaultName'), '/Microsoft.Authorization/keyVaultDoNotDelete')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ],
            "comments": "Resource lock on key vault",
            "properties": {
                "level": "CannotDelete"
            }
        }
    ]
}
